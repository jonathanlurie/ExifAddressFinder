#!/usr/bin/env python

'''
Author      : Jonathan Lurie
Email       : lurie.jo@gmail.com
Version     : 0.1
Licence     : MIT
description :
              Doc for exif fields: http://piexif.readthedocs.org/en/latest/
'''

import GeoToolbox
import exifread
import piexif
from IFD_KEYS_REFERENCE import *
import exifWriter
import os
import argparse


description ="""
ExifAddressFinder adds the postal address in the EXIF Description field of your geo-tagged pictures. Made for a batch usage.

Use the argument -replace to erase the former description and replace it with the address.
By default (when -replace is not used), the address will come after the current description. In this case think about using a -prefix like a blank space, a \\n of a <br> markup as a separator between the current description and the address.

ExifAddressFinder works with Mapbox geocoding to retrieve the address from the GPS coordinate. Meaning an Internet connection is needed.
"""



class ExifAddressFinder:
    _geoToolbox = None


    def __init__(self):
        self._geoToolbox = GeoToolbox.GeoToolbox()


    # return a dictionnary {"lat": yy.yyy, "lon": xx.xxx}
    # or None if not found
    def _getGpsCoordinates(self, fileAddress):
        f = open(fileAddress, 'rb')

        # Return Exif tags
        tags = exifread.process_file(f)

        # add positionning
        if('EXIF GPS GPSLatitude' in tags.keys()  and 'EXIF GPS GPSLongitude' in tags.keys()):

            # dealing with latitutes
            latValues = tags["EXIF GPS GPSLatitude"].values
            latRef = tags["EXIF GPS GPSLatitudeRef"]
            latInt = float(latValues[0].num)
            latDec = float(latValues[1].num) / float(latValues[1].den) / 60. + float(latValues[2].num) / float(latValues[2].den) / 3600.
            lat = latInt + latDec

            if(latRef.values != 'N'):
                lat = lat * (-1)

            # dealing with longitudes
            lonValues = tags["EXIF GPS GPSLongitude"].values
            lonRef = tags["EXIF GPS GPSLongitudeRef"]
            lonInt = float(lonValues[0].num)
            lonDec = float(lonValues[1].num) / float(lonValues[1].den) / 60. + float(lonValues[2].num) / float(lonValues[2].den) / 3600.
            lon = lonInt + lonDec

            if(lonRef.values != 'E'):
                lon = lon * (-1)

            return {"lat": lat, "lon": lon}

        else:
            return None


    # return the address if found
    # returns None if not retrieve
    def _retrieveAddress(self, latitude, longitude):
        address = self._geoToolbox.getAddress(latitude=latitude, longitude=longitude)

        # if the address was well retrieve
        if(address["status"]):
            return address["address"]
        else:
            return None


    # update the EXIF Decription field with the real postal address
    def _updateDescription(self, fileAddress, locationAddress, addToFormer=False):
        # reading exif
        exifDict = piexif.load(fileAddress)
        newDict = exifWriter.writeField(exifDict, DESCRIPTION_FIELD, locationAddress, addToFormer)
        exifWriter.writeExifToFile(newDict, fileAddress)


    def addAddressToImage(self, fileAddress, prefix="", sufix="", addToFormer=False):
        coordinates = self._getGpsCoordinates(fileAddress)

        if(not coordinates):
            print("\tERROR: "+ os.path.basename(fileAddress) +" is not geo tagged")
            return None

        postalAddress = self._retrieveAddress(coordinates["lat"], coordinates["lon"])

        if(not postalAddress):
            print("\tERROR: The address was impossible to retrieve")
            return None

        self._updateDescription(fileAddress, prefix + postalAddress + sufix, addToFormer)

        return 1


def TEST01_ExifAddressFinder():
    eaf = ExifAddressFinder()
    #eaf.addAddressToImage("data/SD_2016-01-04T23-26-15.8025270.jpg")
    eaf.addAddressToImage("data/_NIK8202.jpg")


if __name__ == '__main__':
    #TEST01_ExifAddressFinder()

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-files', nargs='+', required=True, help='Image files to process')
    parser.add_argument('-prefix', required=False, default='', help='Text to add before the address')
    parser.add_argument('-sufix', required=False, default='', help='Text to add after the address')
    parser.add_argument('-replace', action='store_false', required=False, help='Will erase the current description to write only the address')

    args = parser.parse_args()

    eaf = ExifAddressFinder()

    counter = 1

    for f in args.files:
        print os.path.basename(f) + "... (" + str(counter) + "/" +  str(len(args.files)) + ")"
        if(eaf.addAddressToImage(f, args.prefix, args.sufix, args.replace)):
            print "\tDONE"

        counter = counter + 1
